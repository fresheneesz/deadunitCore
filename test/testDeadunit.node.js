"use strict";

global.grobal  = {a:'mooo'} // global variable!!!!!

var fs = require("fs")
var domain = require("domain")

var OldDeadunit = require('deadunit')
var Unit = require('../src/deadunitCore.node')

var tests = require("./deadunitTests")

// these two are required for the 'sourcemap' test, but need to be here because the files can't be built into the bundle (or the sourcemap comment will eff things up)
require('./generated/inlineSourceMapTest.umd')
require('./tests/sourceMapTest.js') // generated by coffeescript
require('./generated/webpackTest.js.bundle.js')
require('./generated/deadlinkSourcemapPath.umd.js')
require('./generated/deadlinkSourceOriginal.umd.js')

var mainTest = OldDeadunit.test(tests.name, function(t) {
    this.timeout(5000)

    //*
    this.test('node-specific tests', function() {
        this.count(3)
        this.timeout(2000)

        this.ok(fs.existsSync(__dirname+'/../npm-shrinkwrap.json'))   // make sure people commit with a shrinkwrap file

        // manifests because of a bug in node that hasn't been fixed in the latest release yet (tho is fixed for the next major version) https://github.com/joyent/node/issues/7550
        // note that this was also a bug in deadunit-core that meant the actual exception wasn't thrown, instead undefined was being thrown
        this.test("errors in events were causing node to quit", function(t) {
            this.count(1)
            var d = domain.create();
            d.on('error', function(er) {
                t.eq(er.message, "don't die!")
            })
            d.run(function() {
                Unit.test(function() {
                    this.ok(true)
                }).events({end: function() {
                    throw new Error("don't die!")
                }})
            })
        })

    })


    this.test('common tests', tests.getTests(Unit, 'node'))

    //*/


}).writeConsole(500)



// returns a function that calls a different function every time
// when it runs out of functions, it errors
function sequence() {
    var n = 0
    return function() {
        var fns = arguments
        n++
        if(n-1 >= fns.length) throw Error("Unexpected call "+n)
        fns[n-1]()

    }
}